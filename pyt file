import numpy as np
import cv2
import easyocr

# Initialize EasyOCR reader
reader = easyocr.Reader(['en'])

# Initialize drawing canvas
canvas_width, canvas_height = 800, 400
canvas = np.ones((canvas_height, canvas_width), dtype=np.uint8) * 255
recognized_texts = []  # Buffer to store recognized words

drawing = False
prev_x, prev_y = None, None

def draw_with_mouse(event, x, y, flags, param):
    global drawing, prev_x, prev_y, canvas
    if event == cv2.EVENT_LBUTTONDOWN:
        drawing = True
        prev_x, prev_y = x, y
    elif event == cv2.EVENT_MOUSEMOVE and drawing:
        if prev_x is not None and prev_y is not None:
            cv2.line(canvas, (prev_x, prev_y), (x, y), (0, 0, 0), thickness=5)
        prev_x, prev_y = x, y
    elif event == cv2.EVENT_LBUTTONUP:
        drawing = False
        prev_x, prev_y = None, None

def recognize_handwriting():
    global recognized_texts
    
    # Convert to grayscale and invert colors
    gray = cv2.bitwise_not(canvas)
    cv2.imwrite("temp.png", gray)  # Save the image for OCR
    
    # Use EasyOCR to recognize handwriting
    result = reader.readtext("temp.png")
    
    if result:
        words = " ".join([res[1] for res in result])
        recognized_texts.append(words)

cv2.namedWindow("Handwriting Pad")
cv2.setMouseCallback("Handwriting Pad", draw_with_mouse)

while True:
    cv2.imshow("Handwriting Pad", canvas)
    
    # Display recognized text dynamically
    text_display = np.ones((100, canvas_width), dtype=np.uint8) * 255
    cv2.putText(text_display, f"Recognized: {' '.join(recognized_texts)}", (50, 50),
                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 0), 2, cv2.LINE_AA)
    cv2.imshow("Recognized Text", text_display)
    
    key = cv2.waitKey(1) & 0xFF
    
    if key == ord('s'):  # Press 's' to process handwriting
        recognize_handwriting()
    elif key == ord('c'):  # Press 'c' to clear canvas
        canvas[:] = 255
    elif key == ord('q'):  # Press 'q' to quit
        break

cv2.destroyAllWindows()
